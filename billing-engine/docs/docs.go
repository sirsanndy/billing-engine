// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://billing-engine.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://billing-engine.com/support",
            "email": "support@billing-engine.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/token": {
            "post": {
                "description": "This function generates a JWT bearer token based on a given secret.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Generate a JWT bearer token",
                "parameters": [
                    {
                        "description": "username",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token successfully generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the customer associated with a specific loan ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Find customer by loan ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Loan ID to search for",
                        "name": "loan_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer details retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing loan_id query parameter",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found for the given loan ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new customer record with name and address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "Customer creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Customer successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload (e.g., empty name/address)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during creation",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{customerID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details for a specific customer by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Retrieve customer details",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer details retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a customer account as inactive. Fails if the customer has an associated loan that is not paid off.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Deactivate a customer",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer successfully deactivated"
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., customer has an active loan)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{customerID}/address": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the address for a specific customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update customer address",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New address payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCustomerAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Address successfully updated"
                    },
                    "400": {
                        "description": "Invalid customer ID or request payload (e.g., empty address)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{customerID}/delinquency": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets the delinquency status for a specific customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update customer delinquency status",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delinquency status payload (` + "`" + `isDelinquent` + "`" + `: true/false)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDelinquencyRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delinquency status successfully updated"
                    },
                    "400": {
                        "description": "Invalid customer ID or request payload",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{customerID}/loan": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Associates a loan ID with a specific customer. Fails if the customer already has a different loan assigned or if the loan ID is already in use by another customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Assign a loan to a customer",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Loan ID payload (loanId must be positive)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignLoanRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Loan successfully assigned"
                    },
                    "400": {
                        "description": "Invalid customer ID or request payload (e.g., invalid loan ID)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., customer already has loan, loan ID already assigned)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{customerID}/reactivate": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a customer account as active.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Reactivate a customer",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer successfully reactivated"
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loans": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows the creation of a new loan by providing the principal amount, term in weeks, annual interest rate, and start date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Create a new loan",
                "parameters": [
                    {
                        "description": "Loan creation request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateLoanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Loan successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.LoanResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{loanID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint retrieves the details of a loan by its ID. Optionally, the repayment schedule can be included in the response by adding the query parameter ` + "`" + `include=schedule` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Retrieve loan details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "loanID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional parameter to include repayment schedule (use 'schedule')",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Loan details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.LoanResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid loan ID or request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Loan not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{loanID}/delinquent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint checks whether a loan is delinquent by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Check loan delinquency status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "loanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delinquency status successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.DelinquentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid loan ID or request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Loan not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{loanID}/outstanding": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint retrieves the outstanding amount for a loan by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Retrieve outstanding loan amount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "loanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outstanding amount successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.OutstandingResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid loan ID or request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Loan not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{loanID}/payments": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint processes a payment for a loan by its ID. The payment amount must be specified in the request payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Make a loan payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "loanID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MakePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment successfully processed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid loan ID, request payload, or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Loan not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AssignLoanRequest": {
            "type": "object",
            "properties": {
                "loanId": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateCustomerRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateLoanRequest": {
            "type": "object",
            "properties": {
                "annualInterestRate": {
                    "type": "number"
                },
                "customerId": {
                    "type": "integer"
                },
                "principal": {
                    "type": "number"
                },
                "startDate": {
                    "type": "string"
                },
                "termWeeks": {
                    "type": "integer"
                }
            }
        },
        "dto.CustomerResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string"
                },
                "createDate": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "isDelinquent": {
                    "type": "boolean"
                },
                "loanId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "dto.DelinquentResponse": {
            "type": "object",
            "properties": {
                "isDelinquent": {
                    "type": "boolean"
                },
                "loanId": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorDetail"
                }
            }
        },
        "dto.LoanResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interestRate": {
                    "type": "string"
                },
                "principalAmount": {
                    "type": "string"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ScheduleEntryResponse"
                    }
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "termWeeks": {
                    "type": "integer"
                },
                "totalLoanAmount": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "weeklyPaymentAmount": {
                    "type": "string"
                }
            }
        },
        "dto.MakePaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                }
            }
        },
        "dto.OutstandingResponse": {
            "type": "object",
            "properties": {
                "loanId": {
                    "type": "string"
                },
                "outstandingAmount": {
                    "type": "string"
                }
            }
        },
        "dto.ScheduleEntryResponse": {
            "type": "object",
            "properties": {
                "dueAmount": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "paidAmount": {
                    "type": "string"
                },
                "paymentDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "weekNumber": {
                    "type": "integer"
                }
            }
        },
        "dto.TokenRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCustomerAddressRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateDelinquencyRequest": {
            "type": "object",
            "properties": {
                "isDelinquent": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Billing Engine API",
	Description:      "This is the API documentation for the Billing Engine service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
