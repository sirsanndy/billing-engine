definitions:
  dto.AssignLoanRequest:
    properties:
      loanId:
        type: integer
    type: object
  dto.CreateCustomerRequest:
    properties:
      address:
        type: string
      name:
        type: string
    type: object
  dto.CreateLoanRequest:
    properties:
      annualInterestRate:
        type: number
      customerId:
        type: integer
      principal:
        type: number
      startDate:
        type: string
      termWeeks:
        type: integer
    type: object
  dto.CustomerResponse:
    properties:
      active:
        type: boolean
      address:
        type: string
      createDate:
        type: string
      customerId:
        type: string
      isDelinquent:
        type: boolean
      loanId:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  dto.DelinquentResponse:
    properties:
      isDelinquent:
        type: boolean
      loanId:
        type: string
    type: object
  dto.ErrorDetail:
    properties:
      code:
        type: string
      field:
        type: string
      message:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorDetail'
    type: object
  dto.LoanResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      interestRate:
        type: string
      principalAmount:
        type: string
      schedule:
        items:
          $ref: '#/definitions/dto.ScheduleEntryResponse'
        type: array
      startDate:
        type: string
      status:
        type: string
      termWeeks:
        type: integer
      totalLoanAmount:
        type: string
      updatedAt:
        type: string
      weeklyPaymentAmount:
        type: string
    type: object
  dto.MakePaymentRequest:
    properties:
      amount:
        type: string
    type: object
  dto.OutstandingResponse:
    properties:
      loanId:
        type: string
      outstandingAmount:
        type: string
    type: object
  dto.ScheduleEntryResponse:
    properties:
      dueAmount:
        type: string
      dueDate:
        type: string
      id:
        type: string
      paidAmount:
        type: string
      paymentDate:
        type: string
      status:
        type: string
      weekNumber:
        type: integer
    type: object
  dto.TokenRequest:
    properties:
      username:
        type: string
    type: object
  dto.UpdateCustomerAddressRequest:
    properties:
      address:
        type: string
    type: object
  dto.UpdateDelinquencyRequest:
    properties:
      isDelinquent:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@billing-engine.com
    name: API Support
    url: http://billing-engine.com/support
  description: This is the API documentation for the Billing Engine service.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://billing-engine.com/terms/
  title: Billing Engine API
  version: "1.0"
paths:
  /auth/token:
    post:
      consumes:
      - application/json
      description: This function generates a JWT bearer token based on a given secret.
      parameters:
      - description: username
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token successfully generated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Generate a JWT bearer token
      tags:
      - Authentication
  /customers:
    get:
      description: Retrieves the customer associated with a specific loan ID.
      parameters:
      - description: Loan ID to search for
        in: query
        minimum: 1
        name: loan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer details retrieved
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Invalid or missing loan_id query parameter
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found for the given loan ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Find customer by loan ID
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Creates a new customer record with name and address.
      parameters:
      - description: Customer creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Customer successfully created
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Invalid request payload (e.g., empty name/address)
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error during creation
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new customer
      tags:
      - Customers
  /customers/{customerID}:
    delete:
      description: Marks a customer account as inactive. Fails if the customer has
        an associated loan that is not paid off.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Customer successfully deactivated
        "400":
          description: Invalid customer ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict (e.g., customer has an active loan)
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deactivate a customer
      tags:
      - Customers
    get:
      description: Retrieves details for a specific customer by their ID.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer details retrieved
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Invalid customer ID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve customer details
      tags:
      - Customers
  /customers/{customerID}/address:
    put:
      consumes:
      - application/json
      description: Updates the address for a specific customer.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      - description: New address payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerAddressRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Address successfully updated
        "400":
          description: Invalid customer ID or request payload (e.g., empty address)
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update customer address
      tags:
      - Customers
  /customers/{customerID}/delinquency:
    put:
      consumes:
      - application/json
      description: Sets the delinquency status for a specific customer.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      - description: 'Delinquency status payload (`isDelinquent`: true/false)'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateDelinquencyRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Delinquency status successfully updated
        "400":
          description: Invalid customer ID or request payload
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update customer delinquency status
      tags:
      - Customers
  /customers/{customerID}/loan:
    put:
      consumes:
      - application/json
      description: Associates a loan ID with a specific customer. Fails if the customer
        already has a different loan assigned or if the loan ID is already in use
        by another customer.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      - description: Loan ID payload (loanId must be positive)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignLoanRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Loan successfully assigned
        "400":
          description: Invalid customer ID or request payload (e.g., invalid loan
            ID)
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict (e.g., customer already has loan, loan ID already
            assigned)
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign a loan to a customer
      tags:
      - Customers
  /customers/{customerID}/reactivate:
    put:
      description: Marks a customer account as active.
      parameters:
      - description: Customer ID
        in: path
        minimum: 1
        name: customerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Customer successfully reactivated
        "400":
          description: Invalid customer ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reactivate a customer
      tags:
      - Customers
  /loans:
    post:
      consumes:
      - application/json
      description: This endpoint allows the creation of a new loan by providing the
        principal amount, term in weeks, annual interest rate, and start date.
      parameters:
      - description: Loan creation request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLoanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Loan successfully created
          schema:
            $ref: '#/definitions/dto.LoanResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new loan
      tags:
      - Loans
  /loans/{loanID}:
    get:
      description: This endpoint retrieves the details of a loan by its ID. Optionally,
        the repayment schedule can be included in the response by adding the query
        parameter `include=schedule`.
      parameters:
      - description: Loan ID
        in: path
        name: loanID
        required: true
        type: integer
      - description: Optional parameter to include repayment schedule (use 'schedule')
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Loan details successfully retrieved
          schema:
            $ref: '#/definitions/dto.LoanResponse'
        "400":
          description: Invalid loan ID or request parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Loan not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve loan details
      tags:
      - Loans
  /loans/{loanID}/delinquent:
    get:
      description: This endpoint checks whether a loan is delinquent by its ID.
      parameters:
      - description: Loan ID
        in: path
        name: loanID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delinquency status successfully retrieved
          schema:
            $ref: '#/definitions/dto.DelinquentResponse'
        "400":
          description: Invalid loan ID or request parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Loan not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check loan delinquency status
      tags:
      - Loans
  /loans/{loanID}/outstanding:
    get:
      description: This endpoint retrieves the outstanding amount for a loan by its
        ID.
      parameters:
      - description: Loan ID
        in: path
        name: loanID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Outstanding amount successfully retrieved
          schema:
            $ref: '#/definitions/dto.OutstandingResponse'
        "400":
          description: Invalid loan ID or request parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Loan not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve outstanding loan amount
      tags:
      - Loans
  /loans/{loanID}/payments:
    post:
      consumes:
      - application/json
      description: This endpoint processes a payment for a loan by its ID. The payment
        amount must be specified in the request payload.
      parameters:
      - description: Loan ID
        in: path
        name: loanID
        required: true
        type: integer
      - description: Payment request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MakePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment successfully processed
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid loan ID, request payload, or validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Loan not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Make a loan payment
      tags:
      - Loans
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-KEY
    type: apiKey
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
